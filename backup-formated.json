{
  "__collections__": {
    "content": {
      "header": {
        "title": "<strong>Tudo</strong> que você precisa para se tornar um <strong>Dev FrontEnd Jr</strong>",
        "description": "Aqui estou fornecendo um roadmap e uma curadoria de conteúdos de estudo para você. É importante ressaltar que este guia será completo e detalhado, abrangendo os principais tópicos para se tornar um desenvolvedor front-end. No entanto, vale destacar que isto não é um curso, e é natural que surjam dúvidas durante o processo de aprendizado. Recomendo utilizar o chat GPT para tirar suas dúvidas, além de pesquisar e explorar outros recursos para aprofundar seus conhecimentos.",
        "quickTip": "<ol><li>Dentro de cada tópico, os links <strong>sublinhados</strong> serão sempre o material que acredito serem suficientes e recomendo assisti-los em primeiro lugar. No entanto, caso ainda haja alguma dificuldade em compreender o que foi ensinado, você pode acessar os próximos links recomendados para obter mais informações e aprofundar seus conhecimentos. Essa abordagem sequencial pode ajudar a construir uma base sólida de compreensão antes de prosseguir para conteúdos mais avançados.</li><li><strong>Não tente memorizar tudo.</strong> Desde o início da sua carreira, você terá contato com inúmeras tecnologias e conceitos diferentes. É impossível memorizar tudo. Em vez disso, concentre-se em compreender os conceitos e entender o que está fazendo. Dessa forma, quando precisar utilizar um determinado recurso novamente, faça uma pequena pesquisa sobre o assunto e o conteúdo será naturalmente relembrado em sua mente.</li><li>Tenho mais <strong>duas sugestões para você</strong>. Durante o desenvolvimento do roadmap, você se deparará com várias sintaxes e conceitos. Portanto, ao aprender sobre git e GitHub (assuntos do primeiro módulo), sugiro que <strong>crie um repositório privado e armazene nele os principais conceitos e sintaxes</strong> que você aprender aqui. Dessa forma, você sempre poderá revisar esses conceitos quando necessário.<br />Além disso, ao longo do roadmap, selecionei diversos projetos práticos para que você possa aplicar os conteúdos aprendidos. <strong>Armazene os projetos mais relevantes no GitHub</strong> também (Coloquei o ícone “*” ao lado dos projetos que considero relevantes.), pois <strong>isso servirá como portfólio para você</strong> no futuro. Durante entrevistas de emprego, você poderá apresentar esses projetos, permitindo que os recrutadores visualizem as <strong>tecnologias que você já domina</strong>.</li><li>Outro ponto importante a ser destacado é que, como essa é uma curadoria de conteúdos relevantes, é possível que alguns temas se repitam nos vídeos. Fiz o possível para evitar ao máximo essa repetição, porém, em alguns casos específicos, isso é inevitável. Nesses momentos, recomendo usar o bom senso: se for um conteúdo que você ainda não domina completamente, aproveite para revisá-lo; no entanto, se já tiver total domínio sobre o tema, avance para os próximos conteúdos do vídeo.</li></ol>",
        "__collections__": {}
      },
      "htmlAndCss": {
        "1": {
          "title": "Fundamentos do Html e Css",
          "steps": [
            "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=yvCAX68TJMc\">Fundamentos do Html e Css (Parte 1) - Matheus Battisti</a></strong>",
            "<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=PuyZAUyZYDI\">Fundamentos do Html e Css (Parte 2) - Matheus Battisti</a>",
            "<strong>HTML (HyperText Markup Language):</strong><br />HTML é a linguagem de marcação utilizada para criar a estrutura e o conteúdo de páginas da web. Ela consiste em uma série de elementos ou tags que são usados para definir diferentes partes de uma página, como títulos, parágrafos, links, imagens e muito mais. Com o HTML, você pode criar a estrutura básica de uma página web e definir a hierarquia dos elementos. Ele fornece a base para a organização e apresentação do conteúdo de um site.<br /><br /><strong>CSS (Cascading Style Sheets):</strong><br />CSS é uma linguagem de estilo utilizada para controlar a aparência e o layout das páginas web. Com o CSS, você pode definir estilos como cores, fontes, tamanhos, espaçamento e posicionamento dos elementos HTML. Ele permite separar a apresentação visual do conteúdo, o que torna mais fácil e flexível alterar o design de um site sem afetar sua estrutura. O CSS usa seletores para identificar os elementos HTML aos quais se aplicam as regras de estilo, e essas regras são definidas em blocos dentro de um arquivo CSS separado ou diretamente na tag HTML.<br /><br />Em resumo, o HTML é responsável pela estrutura e organização do conteúdo de uma página web, enquanto o CSS controla o estilo e a aparência visual dessa página. Juntos, eles desempenham um papel fundamental na criação de sites atraentes e bem projetados. É importante entender e dominar ambos para construir páginas web interativas e esteticamente agradáveis."
          ]
        },
        "2": {
          "title": "Html semântico",
          "steps": [
            "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=tAFRHcEH-Pc\">O que é Html semântico - Matheus Battisti</a></strong>",
            "<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=IHMOu_KEW-0\">O que é Html semântico - Manual do Dev</a>",
            "HTML semântico é uma abordagem de marcação de elementos HTML que atribui significado e estrutura ao conteúdo de uma página da web. Em vez de usar tags genéricas para estilização visual, o HTML semântico utiliza tags específicas que descrevem claramente o tipo de conteúdo que elas envolvem.<br />Ao usar o HTML semântico, é possível comunicar a estrutura e a finalidade de cada elemento do documento, proporcionando uma experiência mais acessível para os usuários e facilitando a compreensão do conteúdo pelos mecanismos de busca.<br /><strong>Aqui estão alguns exemplos de tags HTML semânticas e seus usos comuns:</strong><br /><ul><li><code>&lt;header&gt;</code>: Define o cabeçalho ou topo da página.<br /></li><li><code>&lt;nav&gt;</code>: Define a seção de navegação do site.<br /></li><li><code>&lt;main&gt;</code>: Define o conteúdo principal da página.<br /></li><li><code>&lt;article&gt;</code>: Define um conteúdo independente, como um post de blog.<br /></li><li><code>&lt;section&gt;</code>: Define uma seção temática dentro de um documento.<br /></li><li><code>&lt;aside&gt;</code>: Define um conteúdo relacionado, mas não essencial, como uma barra lateral.<br /></li><li><code>&lt;footer&gt;</code>: Define o rodapé da página.<br /></li></ul>Usar tags semânticas apropriadas em vez de divs genéricas ajuda a estruturar e organizar o conteúdo de forma mais clara e significativa. Além disso, o HTML semântico melhora a acessibilidade, permitindo que leitores de tela e outros dispositivos compreendam melhor a hierarquia e o propósito dos elementos em uma página.<br />Ao adotar o HTML semântico, você cria páginas da web mais legíveis, acessíveis e amigáveis tanto para usuários quanto para mecanismos de busca. É uma prática recomendada para desenvolvedores web, pois ajuda a melhorar a usabilidade e a qualidade global do seu site."
          ]
        },
        "3": {
          "title": "Materiais extras",
          "steps": [
            "<a target=\"_blank\" href=\"https://github.com/hail2u/html-best-practices\">Melhores práticas de Html</a>",
            "<a target=\"_blank\" href=\"https://htmlcheatsheet.com/\">Dicionário do Html</a>"
          ]
        },
        "4": {
          "title": "Projetos de Fixação",
          "steps": [
            "<strong><a href=\"https://www.youtube.com/watch?v=np3L1lb-Uvs\" target=_blank>Card de Perfil com Html e Css</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=pLwEasHW3_I\" target=_blank>Cartão de crédito com Html e Css </a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=PgAZ8KzfhO8\" target=_blank>Website 1 com Html e Css</a></strong> ",
            "<strong><a href=\"https://www.youtube.com/watch?v=Brn32_3i8nk\" target=_blank>Website 2 com Html e Css</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=CQZxeoQeo5c\" target=\"_blank\">Website 3 com Html e Css</a></strong>"
          ]
        },
        "__collections__": {}
      },
      "terminalAndGit": {
        "1": {
          "title": "Terminal",
          "steps": [
            {
              "title": "O que é o shell",
              "steps": [
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=pL1wshglWxE\">O que é Shell - Leandro Ramos</a></strong>",
                "<strong><a target=\"_blank\" href=\"https://segredo.dev/o-que-e-shell/\">O que é Shell - Segredo Dev</a></strong>",
                "<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=vkhJfHLA_po\">Fundamentos do Shell - Filho da nuvem</a>",
                "<a target=\"_blank\" href=\"https://www.hostmidia.com.br/blog/o-que-e-shell/\">O que é Shell - Hostmidia</a>",
                "O Shell é um programa que possibilita à usuária acessar recursos do Sistema Operacional, através do Terminal ou da interface gráfica. É ele quem faz a ponte de comunicação entre o núcleo do Sistema Operacional e a usuária/aplicações/programas. <br />O Shell CLI mais conhecido entre as usuárias de sistemas baseados em UNIX é o Bash. No Windows temos o PowerShell."
              ]
            },
            {
              "title": "O que é bash",
              "steps": [
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=4v5oklGdNnYash?\">O que é Bash - Leandro Ramos</a></strong>",
                "<strong><a target=\"_blank\" href=\"https://www.hostgator.com.br/blog/o-que-e-bash/\">O que é Bash - Hostgator</a></strong>",
                "<a target=\"_blank\" href=\"https://rockcontent.com/br/blog/bash/\">O que é Bash - Rockcontent</a>",
                "<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=vE0McEujAGk\">Diferenças entre Bash's - Diolinux</a>",
                "O Bash (Bourne Again SHell) é um interpretador de comandos e uma linguagem de script amplamente utilizada em sistemas operacionais baseados em Unix, como Linux e macOS. Ele fornece uma interface de linha de comando interativa que permite aos usuários interagir com o sistema operacional e executar tarefas variadas. O Bash oferece uma ampla gama de recursos e funcionalidades poderosas. Aqui estão alguns conceitos importantes para entender sobre o Bash:<ol><li><strong>Interface de linha de comando (CLI):</strong> O Bash permite que os usuários enviem comandos diretamente para o sistema operacional por meio de um terminal ou console. Isso proporciona um nível maior de controle e flexibilidade em comparação com interfaces gráficas.</li><li><strong>Comandos e programas:</strong> O Bash permite que você execute comandos embutidos (internos) ou programas externos disponíveis no sistema operacional. Existem diversos comandos básicos, como <code>ls</code> (listar arquivos e diretórios), <code>cd</code> (mudar de diretório), <code>mkdir</code> (criar diretório) e <code>rm</code> (remover arquivos ou diretórios).</li><li><strong>Variáveis:</strong> No Bash, você pode armazenar valores em variáveis para uso posterior. As variáveis são úteis para armazenar informações temporárias, como nomes de arquivos, resultados de cálculos ou configurações do sistema.</li><li><strong>Redirecionamento:</strong> O Bash permite redirecionar a entrada e a saída dos comandos. Você pode redirecionar a saída de um comando para um arquivo usando o operador <code>></code> ou anexar a saída a um arquivo existente usando <code>>></code>. Além disso, você pode redirecionar a entrada de um comando a partir de um arquivo usando <code><</code>.</li><li><strong>Lógica condicional e loops:</strong> O Bash oferece recursos de controle de fluxo, como declarações condicionais (usando <code>if</code>, <code>else</code> e <code>fi</code>) e loops (como <code>for</code> e <code>while</code>). Isso permite que você tome decisões e execute tarefas repetidamente com base em certas condições.</li><li><strong>Scripts Bash:</strong> Além de usar o Bash interativamente, você também pode escrever scripts, que são arquivos contendo uma sequência de comandos Bash. Esses scripts podem ser executados para automatizar tarefas, como configuração do sistema, processamento de arquivos ou execução de tarefas repetitivas.</li></ol>O Bash é uma ferramenta poderosa para a linha de comando, amplamente utilizada por administradores de sistemas, desenvolvedores e entusiastas de tecnologia. Dominar o Bash é uma habilidade valiosa para qualquer estudante iniciante interessado em aprender sobre sistemas operacionais baseados em Unix e automação de tarefas."
              ]
            },
            {
              "title": "O que é o terminal",
              "steps": [
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=BKRi5K4Ouuo\">O que é o Terminal - Daniel Berg</a></strong>",
                "<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=q0OyM0ziAic\">O que é o Terminal - Filho da nuvem</a>",
                "O terminal, também conhecido como linha de comando ou prompt de comando, é uma interface de texto que permite aos usuários interagir com um computador usando comandos. É uma ferramenta poderosa para executar tarefas e administrar um sistema operacional.<br />Aqui estão algumas informações importantes para um estudante iniciante entender sobre o terminal:<br /> <ol><li><strong>Interface de linha de comando:</strong> O terminal é uma interface de linha de comando que permite aos usuários digitar comandos em forma de texto e enviá-los ao sistema operacional para execução. Diferentemente de interfaces gráficas, como janelas e ícones, o terminal é baseado em texto e não requer o uso do mouse.</li><li><strong>Comandos:</strong> No terminal, você pode executar uma variedade de comandos para realizar diversas tarefas. Existem comandos básicos, como <code>ls</code> (listar arquivos e diretórios), <code>cd</code> (mudar de diretório), <code>mkdir</code> (criar diretórios) e <code>rm</code> (remover arquivos e diretórios). Além disso, existem comandos mais avançados para executar tarefas específicas, como manipulação de arquivos, instalação de software e gerenciamento de rede.</li><li><strong>Navegação de diretórios:</strong> Com o terminal, você pode navegar pelos diretórios (pastas) do seu sistema de arquivos. O comando <code>cd</code> permite que você mude de diretório, por exemplo, <code>cd Documents</code> o levará para o diretório \"Documents\". Você pode usar <code>ls</code> para listar o conteúdo de um diretório e <code>pwd</code> para exibir o diretório atual em que você está.</li><li><strong>Argumentos e opções:</strong> Muitos comandos do terminal aceitam argumentos e opções para modificar seu comportamento. Os argumentos são informações adicionais fornecidas ao comando, como nomes de arquivos ou diretórios. As opções são sinalizadores que alteram o comportamento padrão do comando. Por exemplo, <code>ls -l</code> exibe uma listagem detalhada dos arquivos e diretórios.</li><li><strong>Autoconclusão:</strong> O terminal geralmente possui um recurso de autoconclusão que permite prever ou concluir comandos, nomes de arquivos e diretórios automaticamente. Pressionar a tecla \"Tab\" pode ajudar a economizar tempo e evitar erros de digitação.</li><li><strong>Histórico de comandos:</strong> O terminal mantém um histórico dos comandos que você digitou, permitindo que você os acesse novamente facilmente. Pressionar a seta para cima e para baixo no teclado permite percorrer o histórico e executar comandos anteriores novamente.</li></ol> O terminal é uma ferramenta essencial para desenvolvedores de software, administradores de sistemas e entusiastas de tecnologia. À medida que você ganha experiência, descobrirá que o terminal oferece uma maneira eficiente e flexível de interagir com um computador e executar tarefas complexas."
              ]
            },
            {
              "title": "Principais comandos de terminal",
              "steps": [
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=B6wQDGRSQ08\">Comandos de terminal Parte 1 - Leandro Ramos</a></strong>",
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=u4HuV3-85vc\">Comandos de terminal Parte 2 - Leandro Ramos</a></strong>",
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=wpXLF_cXdvM\">Comandos de terminal Parte 3 - Leandro Ramos</a></strong>",
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=jamSZSXCjP4\">Comandos de terminal Parte 4 - Leandro Ramos</a></strong>",
                "<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=uNcSM7-45fY\">Principais comandos de terminal - Daniel Berg</a>",
                "Aqui está uma lista abrangente de comandos de terminal shell que podem ser úteis para um desenvolvedor front-end:<br /><strong>Comandos de navegação:</strong><ul><li><code>ls</code> Lista os arquivos e diretórios no diretório atual.</li><li><code>cd</code> Navega para um diretório específico.</li><li><code>pwd</code> Exibe o caminho completo do diretório atual.</li></ul><strong>Comandos de manipulação de arquivos e diretórios:</strong><ul><li><code>mkdir</code> Cria um novo diretório.</li><li><code>touch</code> Cria um novo arquivo vazio.</li><li><code>cp</code> Copia arquivos e diretórios.</li><li><code>mv</code> Move arquivos e diretórios.</li><li><code>rm</code> Remove arquivos e diretórios.</li><li><code>find</code> Localiza arquivos e diretórios com base em critérios específicos.</li></ul><strong>Comandos de leitura e visualização de arquivos:</strong><ul><li><code>cat</code> Exibe o conteúdo de um arquivo.</li><li><code>less</code> Visualiza o conteúdo de um arquivo de forma paginada.</li><li><code>head</code> Exibe as primeiras linhas de um arquivo.</li><li><code>tail</code> Exibe as últimas linhas de um arquivo.</li></ul><strong>Comandos de edição de texto:</strong><ul><li><code>nano</code> Editor de texto simples no terminal.</li><li><code>vi/vim</code> Editor de texto avançado no terminal.</li><li><code>sed</code> Editor de fluxo de texto para substituir, extrair ou transformar texto.</li></ul><strong>Comandos de pesquisa e filtragem de texto:</strong><ul><li><code>grep</code> Pesquisa um padrão em um arquivo ou saída de comando.</li><li><code>awk</code> Processa e extrai dados de texto estruturado.</li><li><code>cut</code> Seleciona campos específicos de um arquivo de texto.</li><li><code>sort</code> Ordena as linhas de um arquivo de texto.</li></ul><strong>Comandos de gerenciamento de pacotes e dependências:</strong><ul><li><code>npm</code> Gerenciador de pacotes para instalar e gerenciar bibliotecas e dependências JavaScript.</li><li><code>yarn</code> Gerenciador de pacotes alternativo ao npm.</li><li><code>npx</code> Executa pacotes npm diretamente, sem a necessidade de instalá-los globalmente.</li></ul><strong>Comandos de controle de versão:</strong><ul><li><code>git</code> Ferramenta de controle de versão para rastrear alterações em projetos de desenvolvimento.</li><li><code>svn</code> Sistema de controle de versão centralizado.</li></ul><strong>Comandos de rede:</strong><ul><li><code>curl</code> Realiza solicitações HTTP e exibe a resposta.</li><li><code>ping</code> Testa a conectividade com um host específico.</li><li><code>traceroute</code> Mostra a rota seguida por pacotes de rede para alcançar um host.</li></ul><strong>Comandos de compressão e arquivamento:</strong><ul><li><code>tar</code> Cria, extrai ou manipula arquivos tar (compactados ou arquivados).</li><li><code>zip/unzip</code> Comprime arquivos em um arquivo zip ou extrai arquivos de um arquivo zip.</li></ul><strong>Outros comandos úteis:</strong><ul><li><code>chmod</code> Altera as permissões de um arquivo ou diretório.</li><li><code>chown</code> Altera o proprietário e o grupo de um arquivo ou diretório.</li><li><code>ssh</code> Conecta-se a um servidor remoto usando o protocolo SSH.</li><li><code>scp</code> Copia arquivos entre um sistema local e um servidor remoto usando SSH.</li></ul>Essa lista abrange uma variedade de comandos úteis, mas lembre-se de que a escolha dos comandos a serem usados dependerá do seu ambiente de trabalho e das suas necessidades específicas como desenvolvedor front-end."
              ]
            },
            {
              "title": "Qual a diferença entre shell e terminal",
              "steps": [
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=3ZcnH3F_TZY\">Diferença entre Shell e Terminal - Ponteiro Duplo</a></strong>",
                "<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=Yt57-gg9jVg\">Diferença entre Shell e Terminal - Udacity (Ligue a legenda)</a>",
                "É comum haver confusão entre os termos \"shell\" e \"terminal\", mas eles se referem a conceitos diferentes relacionados à interação com o sistema operacional. Aqui está um resumo para um estudante iniciante entender a diferença entre eles:<br /><strong>Shell:</strong> O shell é um programa que funciona como uma interface entre o usuário e o sistema operacional. Ele recebe comandos do usuário, interpreta-os e os executa. O shell pode ser considerado uma linguagem de script que permite ao usuário interagir com o sistema operacional por meio de comandos. Ele fornece recursos como a execução de programas, manipulação de arquivos, controle de fluxo, entre outros.<br />Existem vários tipos de shells disponíveis, como o Bash (Bourne Again SHell), o Zsh (Z Shell), o Csh (C Shell) e o PowerShell. Cada shell tem suas próprias características e sintaxe, mas todos eles permitem que você execute comandos no sistema operacional.<br /><strong>Terminal:</strong> O terminal é uma aplicação que fornece uma interface de texto para interagir com o shell. É onde você digita comandos e recebe a saída do shell. O terminal exibe o prompt de comando, onde você pode digitar seus comandos e obter resultados.<br />O terminal geralmente inclui recursos como edição de linha, histórico de comandos, autoconclusão e controle de sessões. Ele permite que você execute comandos em uma janela de texto, enviando-os para o shell subjacente, que os interpreta e executa as ações correspondentes.<br /><strong>Para resumir:</strong><ul><li>O shell é o programa que interpreta e executa os comandos do usuário.</li><li>O terminal é a interface de texto que permite digitar os comandos e exibe os resultados fornecidos pelo shell.</li> </ul>Em resumo, o shell é o motor por trás dos comandos, enquanto o terminal é a janela ou aplicação que você usa para interagir com o shell e enviar comandos para serem executados."
              ]
            },
            {
              "exercises": [
                {
                  "question": "<ol><li>No terminal, crie um diretório chamado <code>course_tests</code> usando o comando de criação de diretórios que você aprendeu e navegue até ele.</li><li>Crie um arquivo de texto e de o nome <code>first-file.txt</code>.</li><li>Faça uma cópia do arquivo <code>first-file.txt</code> usando o nome <code>course_backup.txt</code>.</li><li>Mude o nome do arquivo <code>first-file.txt</code>.</li><li>Dentro do diretório <code>course_tests</code>, crie um novo diretório chamado <code>backup</code>.</li><li>Mova o arquivo <code>course_backup.txt</code> para o diretório <code>backup</code>.</li><li>Dentro de <code>course_tests</code>, crie um novo diretório chamado <code>backup2</code>.</li><li>Mova o arquivo <code>course_backup.txt</code> que está no diretório <code>backup</code> para <code>backup2</code>.</li><li>Apague a diretório <code>backup</code>.</li><li>Renomeie o diretório <code>backup2</code> para <code>backup</code>.</li><li>Cheque qual é o path completo do diretório atual e liste os arquivos dentro dele.</li><li>Remova a pasta <code>backup</code>.</li><li>Limpe o terminal.</li><li>Crie manualmente (com o mouse) um arquivo de texto chamado <code>paises.txt</code> e cole o contéudo abaixo.</li><blockquote>Brasil<br />Estados<br />Unidos<br />México<br />Portugal<br />Espanha<br />Argentina<br />Egito<br />Africa do Sul<br /></blockquote><li>Exiba na tela os cinco primeiros paises do arquivo <code>paises.txt</code></li><li>Exiba na tela os últimos quatro paises do arquivo <code>paises.txt</code></li><li>Apague todos os arquivos que possuem a extensão <code>.txt</code></li></ol>",
                  "answer": "<ol><li><code>mkdir course_tests</code> <code>cd course_tests</code></li><li><code>touch first-file.txt</code></li><li><code>cp first-file.txt course_backup.txt</code></li><li><code>mv first-file.txt another-name.txt</code></li><li><code>mkdir backup</code></li><li><code>mv course_backup.txt backup</code></li><li><code>mkdir backup2</code></li><li><code>mv backup/course_backup.txt backup2</code></li><li><code>rmdir backup</code></li><li><code>mv backup2 backup</code></li><li><code>pwd</code> <code>ls</code></li><li><code>rm -rd backup</code></li><li><code>clear</code></li><li><code>head -n 5 paises.txt</code></li><li><code>tail -n 4 paises.txt</code></li><li><code>rm *.txt</code></li></ol>"
                },
                {
                  "answer": "<ol><li><code>cat countries.txt</code></li><li><code>more countries.txt</code> ou <code>less countries.txt</code></li><li><code>grep Brazil countries.txt</code></li><li><code>grep -i brazil countries.txt</code></li></ol>",
                  "question": "<ol><li>Copie e cole os seguintes comandos no seu terminal, esses comandos irão baixar um arquivo com o nome de todos os países do mundo utilizando o comando <code>curl</code> que voce irá aprender mais sobre ele no futuro.</li><div class=\"block-code\"><p class=\"command\">mkdir</p> course_tests_search<br /><p class=\"command\">cd</p> course_tests_search<br /><p class=\"command\">curl</p> -o countries.txt <p class=\"string\">\"https://gist.githubusercontent.com/kalinchernev/486393efcca01623b18d/raw/daa24c9fea66afb7d68f8d69f0c4b8eeb9406e83/countries\"</p></div><li>Exiba todo o conteúdo do arquivo <code>countries.txt</code> no terminal.</li><li>Mostre o conteúdo do arquivo <code>countries.txt</code> de forma paginada, até encontrar o país \"Zimbabwe\".</li><li>Procure pelo país \"Brazil\" no arquivo <code>countries.txt</code>.</li><li>Realize outra busca por \"brazil\", mas agora utilize letras minúsculas e não faça diferenciação entre maiúsculas e minúsculas.</li></ol>"
                },
                {
                  "answer": "<ol><li><code>touch sentenses.txt</code></li><li><code>grep -v mais phrases.txt</code></li><li><code>wc -l phrases.txt</code></li><li><code>wc -w phrases.txt</code></li></ol>",
                  "question": "<ol><li>Crie um arquivo <code>sentenses.txt</code> e adicione frases aleatórias a ele</li><li>Busque pelas frases que não contenham a palavra \"mais\".</li><li>Mostre a quantidade de linhas do arquivo <code>sentenses.txt</code>.</li><li>Mostre a quantidade de palavras do arquivo <code>sentenses.txt</code></li></ol>"
                },
                {
                  "question": "<ol><li>Crie dois arquivos  <code>first.xls</code> e  <code>second.tbt</code></li><li>Exiba todos os arquivos da pasta  <code>course_tests_search</code> no teminal</li><li>Exiba todos os arquivos que terminem com  <code>txt</code> no teminal</li><li>Exiba todos os arquivos que terminem com  <code>txt</code> ou  <code>tbt</code> no teminal</li><li>Exiba o manual do comando <code>ls</code></li></ol>",
                  "answer": "<ol><li><code>touch first.xls</code> <code>touch second.tbt</code></li><li><code>ls</code></li><li><code>ls *txt</code></li><li><code>ls *t?t</code></li><li><code>man ls</code></li></ol>"
                },
                {
                  "answer": "<ol><li><code>mkdir course_tests_abilities</code> <code>cd course_tests_abilities</code></li><li><div class=\"block-code\"><p class=\"command\">touch</p> abilities.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"Javascript\"</p>  >> abilities.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"CSS\"</p>  >> abilities.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"HTML\"</p>  >> abilities.txt<br /></div></li><li><div class=\"block-code\"><p class=\"command\">echo</p> <p class=\"string\">\"React\"</p>  >> abilities.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"Vue\"</p>  >> abilities.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"Angular\"</p>  >> abilities.txt<br /><p class=\"command\">sort</p> < abilities.txt<br /></div></li><li><code>cat abilities.txt | wc -l</code></li><li><code>sort < abilities.txt | head -n 3 > top_abilities.txt</code></li><li><div class=\"block-code\"><p class=\"command\">touch</p> phrases.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"random phrase 1\"</p>  >> phrases.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"random phrase 2\"</p>  >> phrases.txt<br /><p class=\"command\">echo</p> <p class=\"string\">\"random phrase 3\"</p>  >> phrases.txt<br /></div></li><li><code>grep af phrases.txt | wc -l</code></li><li><code>grep -v af phrases.txt | wc -l</code></li></li></ol>",
                  "question": "<ol><li>Crie o diretório <code>course_tests_abilities</code> e navegue até ele no terminal.</li><li>Crie um arquivo de texto usando o terminal com o nome <code>abilities.txt</code> e insira os valores \"Javascript\", \"CSS\" e \"HTML\", cada um em uma linha.</li><li>Adicione mais 3 itens à sua lista de habilidades e, em seguida, exiba a lista ordenada no terminal.</li><li>Mostre no terminal o número de linhas do arquivo <code>abilities.txt</code>.</li><li>Crie um arquivo chamado <code>top_abilities.txt</code> usando o conteúdo do arquivo <code>abilities.txt</code>. O novo arquivo deve conter as 3 primeiras habilidades em ordem alfabética.</li><li>Crie um novo arquivo chamado <code>phrases.txt</code> no terminal e insira frases aleatórias.</li><li>Mostre no terminal o número de linhas que contêm as letras \"af\" no arquivo.</li><li>Mostre no terminal o número de linhas que não contêm as letras \"af\".</li></ol>"
                }
              ],
              "title": "Recapitulando na prática"
            }
          ]
        },
        "2": {
          "title": "Git e GitHub",
          "steps": [
            {
              "title": "O que é Git e GitHub",
              "steps": [
                "<strong><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=DqTITcMq68k\">O que é Git e GitHub - Rafaella Ballerini</a></strong>",
                "<p><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=P4BNi_yPehc\">O que é Git e GitHub - Alura</p>",
                "<strong>Git:</strong><br />O Git é um sistema de controle de versão distribuído amplamente utilizado no desenvolvimento de software. Ele permite que você rastreie e gerencie as alterações feitas em arquivos e diretórios ao longo do tempo, mantendo um histórico completo das modificações. Com o Git, você pode trabalhar em equipe de forma eficiente, colaborando em projetos de software de qualquer tamanho.<br /><strong>Características importantes do Git incluem:</strong><br /><ol><li><strong>Controle de versão distribuído</strong>: Cada desenvolvedor possui uma cópia completa do repositório Git, incluindo todo o histórico de alterações. Isso permite que você trabalhe offline e faça commits locais antes de sincronizar com outros colaboradores.</li><li><strong>Branching e merging</strong>: O Git permite que você crie branches (ramificações) independentes do código principal para desenvolver recursos, corrigir bugs ou experimentar novas ideias. Você pode mesclar (merge) essas ramificações de volta ao código principal quando estiverem prontas.</li><li><strong>Histórico e reversão de alterações</strong>: O Git mantém um histórico completo de todas as alterações feitas nos arquivos do projeto. Isso permite que você veja quem fez cada alteração, quando e por quê. Além disso, você pode reverter alterações anteriores ou retornar a versões específicas do código.</li></ol><br /><strong>GitHub:</strong><br />O GitHub é uma plataforma de hospedagem de código que se baseia no Git. Ele fornece um ambiente colaborativo para desenvolvedores compartilharem, colaborarem e gerenciarem projetos de software. Com o GitHub, você pode armazenar seus repositórios Git online, colaborar com outros desenvolvedores, revisar código, gerenciar problemas (issues) e lançar projetos.<br /><strong>Algumas características importantes do GitHub incluem:</strong><br /><ol><li><strong>Hospedagem de repositórios:</strong>O GitHub permite que você armazene seus repositórios Git em um servidor remoto. Isso facilita o compartilhamento e o acesso ao código entre desenvolvedores.</li><li><strong>Colaboração</strong>: Vários desenvolvedores podem trabalhar juntos em um repositório Git hospedado no GitHub. Eles podem criar branches, fazer commits, revisar código e mesclar alterações usando pull requests.</li><li><strong>Gerenciamento de problemas</strong>: O GitHub possui um sistema integrado de rastreamento de problemas (issues) que permite que você registre e acompanhe problemas, bugs ou tarefas relacionadas ao seu projeto. Isso facilita a comunicação entre os membros da equipe.</li><li><strong>Integração com serviços externos</strong>: O GitHub oferece integrações com várias ferramentas populares, como serviços de integração contínua (CI), serviços de hospedagem de sites e ferramentas de gerenciamento de projetos, para facilitar o fluxo de trabalho de desenvolvimento.</li></ol>Em resumo, o Git é um sistema de controle de versão distribuído que permite rastrear e gerenciar alterações em projetos de software, enquanto o GitHub é uma plataforma que aproveita o poder do Git para fornecer recursos adicionais, como colaboração, hospedagem remota de repositórios e gerenciamento de problemas. Juntos, o Git e o GitHub são amplamente usados."
              ]
            },
            {
              "title": "Principais Comandos Git",
              "steps": [
                "<ol><li><code>git init</code>: Inicializa um repositório Git em um diretório local.</li><li><code>git clone [URL]</code>: Clona um repositório remoto para o seu diretório local.</li><li><code>git add [arquivo]</code>: Adiciona um arquivo específico ao próximo commit.</li><li><code>git add .</code>: Adiciona todas as alterações e arquivos ao próximo commit.</li><li><code>git commit -m \"[mensagem]\"</code>: Confirma as alterações adicionadas, criando um novo commit com uma mensagem descritiva.</li><li><code>git status</code>: Exibe o status atual do seu repositório, mostrando os arquivos modificados, adicionados ou excluídos.</li><li><code>git pull</code>: Obtém as últimas alterações do repositório remoto e mescla-as com o branch atual.</li><li><code>git push</code>: Envia os commits locais para o repositório remoto.</li><li><code>git branch</code>: Lista todos os branches no repositório local.</li><li><code>git branch [nome]</code>: Cria um novo branch com o nome especificado.</li><li><code>git checkout [branch]</code>: Altera para o branch especificado.</li><li><code>git merge [branch]</code>: Mescla o branch especificado com o branch atual.</li><li><code>git log</code>: Mostra o histórico de commits do repositório.</li><li><code>git remote -v</code>: Lista os repositórios remotos configurados.</li><li><code>git remote add [nome] [URL]</code>: Adiciona um repositório remoto com o nome especificado e a URL fornecida.</li><li><code>git remote remove [nome]</code>: Remove o repositório remoto com o nome especificado.</li><li><code>git diff</code>: Mostra as diferenças entre os arquivos modificados e as versões anteriores.</li><li><code>git stash</code>: Armazena as alterações em um local temporário para que você possa alternar para outro branch ou realizar outras tarefas.</li><li><code>git tag [nome]</code>: Cria uma nova tag para marcar um commit específico.</li><li><code>git reset [commit]</code>: Desfaz alterações e move a branch atual para o commit especificado.</li></ol><p>Esses são apenas alguns dos principais comandos do Git, e há muitos outros recursos e opções disponíveis. É recomendado consultar a documentação oficial do Git para obter mais informações sobre cada comando e suas opções.</p>"
              ]
            },
            {
              "title": "Recapitulando na prática",
              "steps": [
                "<p>Como usar o Git e o GitHub na prática, siga esse tutorial para entender na prática como os principais comandos do Git funcionam.</p><ol><li><strong>Instalação do Git:</strong><ul><li>Primeiro, verifique se o Git está instalado em sua máquina digitando <code>git --version</code> no terminal. Se não estiver instalado, siga as instruções de instalação fornecidas em <a target=\"_blank\" href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a>.</li></ul></li><li><strong>Configuração Inicial:</strong><ul><li>Abra o terminal e configure seu nome de usuário digitando <code>git config --global user.name \"Seu Nome\"</code> e pressionando Enter.</li><li>Em seguida, configure seu endereço de e-mail digitando <code>git config --global user.email \"seuemail@example.com\"</code> e pressionando Enter.</li></ul></li><li><strong>Criando um Repositório Local:</strong><ul><li>Crie um diretório do seu projeto git usando o comando <code>mkdir nome-da-pasta</code>.</li><li>Entre no diretório <code>cd nome-da-pasta</code> e para iniciar um novo repositório Git, execute o comando <code>git init</code>. Isso criará uma pasta oculta chamada <code>.git</code>, onde o histórico de versões será armazenado.</li></ul></li><li><strong>Adicionando e commitando alterações:</strong><ul><li>Crie um arquivo <code>touch nome-do-arquivo.txt</code> e adicione qualquer conteúdo nele.</li><li>Cheque o status da sua branch com o comando <code>git status</code> deverá listar o arquivo que acabou de ser criado.</li><li>Adicione ao controle de versão do Git executando o comando <code>git add nome-do-arquivo.txt</code> para um arquivo específico ou <code>git add .</code> para adicionar todos os arquivos alterados no diretório atual.</li><li>Novamente cheque o status da sua branch com o comando <code>git status</code>.</li><li>Confirme as alterações com um commit usando o comando <code>git commit -m \"Meu primeiro commit\"</code>.</li></ul></li><li><strong>Criando um Repositório Remoto no GitHub:</strong><ul><li>Acesse o site do GitHub (<a target=\"_blank\" href=\"https://github.com\">https://github.com</a>) e faça login na sua conta (ou crie uma, se necessário).</li><li>Clique no botão \"New\" ou \"Novo\" ou  para criar um novo repositório.</li><li>Dê um nome ao repositório, adicione uma descrição opcional e configure as opções conforme necessário.</li><li>Clique em \"Create Repository\" ou \"Criar Repositório\" para criar o repositório remoto.</li></ul></li><li><strong>Adicionando uma nova chave SSH à sua conta do GitHub:</strong><ul><li>Siga esse tutorial do próprio GitHub <a target=\"_blank\" href=\"https://docs.github.com/pt/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account\">https://docs.github.com/pt/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account</a>.</li></ul></li><li><strong>Conectando o Repositório Local ao Repositório Remoto:</strong><ul><li>No terminal, adicione o link SSH do repositório remoto como o origin usando o comando <code>git remote add origin LINK_SSH_DO_REPOSITORIO</code>.</li><li>Para verificar se a configuração está correta, execute <code>git remote -v</code>. Você deve ver o Link SSH do repositório remoto listada como origin.</li></ul></li><li><strong>Enviando as Alterações para o Repositório Remoto:</strong><ul><li>Use o comando <code>git push -u origin nome-branch</code> para enviar as alterações do branch atual para o repositório remoto. Por exemplo, para enviar as alterações para o branch principal (geralmente chamado de \"main\" ou \"master\"), use <code>git push -u origin main</code>.</li><li>Agora cheque no GitHub se o arquivo criado está no repositório remoto.</li></ul></li><li><strong>Criando uma nova branch:</strong><ul><li>De volta ao terminal crie uma nova branch com o comando <code>git checkout -b nova-branch</code>.</li><li>Cheque se está realmente na branch nova com o comando <code>git branch</code>, a nova branch deve aparecer listada, para sair da lista de branchs aperte a tecla \"q\" do seu teclado.</li><li>Faça alguma alteração no arquivo <code>nome-do-arquivo.txt</code> que foi criado.</li><li>Adicione o arquivo ao controle de versão do Git executando o comando <code>git add nome-do-arquivo.txt</code>.</li><li>Confirme as alterações com mais um commit usando o comando <code>git commit -m \"Meu segundo commit\"</code>.</li><li>E novamente com o comando <code>git push origin nome-branch</code> para enviar as alterações do branch atual para o repositório remoto.</li></ul></li><li><strong>Criando um Pull Request no GitHub:</strong><ul><li>No repositório remoto no GitHub, clique na aba \"Pull Requests\" ou \"Solicitações de Pull\".</li><li>Clique no botão \"New Pull Request\" ou \"Nova Solicitação de Pull\".</li><li>Selecione o branch base (normalmente \"main\" ou \"master\") e o branch de comparação (o branch com suas alterações <code>nova-branch</code>).</li><li>Revise as alterações e, se tudo estiver correto, clique em \"Create Pull Request\" e depois em \"Create Pull Request\" novamente.</li><li>Você será direcionado para a página do Pull Request, nessa página deve se checar se as alterações estão todas corretas, então clique em \"Merge pull request\" > \"Confirm merge\", e assim as alterações da <code>nova-branch</code> estão mescladas com a <code>main</code> branch :)</li></ul></li></ol>"
              ]
            }
          ]
        },
        "__collections__": {}
      },
      "welcome": {
        "description": "Aqui estou fornecendo um roadmap e uma curadoria de conteúdos de estudo para você. É importante ressaltar que este guia será completo e detalhado, abrangendo os principais tópicos para se tornar um desenvolvedor front-end. No entanto, vale destacar que isto não é um curso, e é natural que surjam dúvidas durante o processo de aprendizado. Recomendo utilizar o chat GPT para tirar suas dúvidas, além de pesquisar e explorar outros recursos para aprofundar seus conhecimentos.",
        "title": "<strong>Tudo</strong> que você precisa para se tornar um <strong>Dev FrontEnd Jr</strong>",
        "importantTips": "<ol><li>Dentro de cada tópico, os links <strong>sublinhados</strong> serão sempre o material que acredito serem suficientes e recomendo assisti-los em primeiro lugar. No entanto, caso ainda haja alguma dificuldade em compreender o que foi ensinado, você pode acessar os próximos links recomendados para obter mais informações e aprofundar seus conhecimentos. Essa abordagem sequencial pode ajudar a construir uma base sólida de compreensão antes de prosseguir para conteúdos mais avançados.</li><li><strong>Não tente memorizar tudo.</strong> Desde o início da sua carreira, você terá contato com inúmeras tecnologias e conceitos diferentes. É impossível memorizar tudo. Em vez disso, concentre-se em compreender os conceitos e entender o que está fazendo. Dessa forma, quando precisar utilizar um determinado recurso novamente, faça uma pequena pesquisa sobre o assunto e o conteúdo será naturalmente relembrado em sua mente.</li><li>Tenho mais <strong>duas sugestões para você</strong>. Durante o desenvolvimento do roadmap, você se deparará com várias sintaxes e conceitos. Portanto, ao aprender sobre git e GitHub (assuntos do primeiro módulo), sugiro que <strong>crie um repositório privado e armazene nele os principais conceitos e sintaxes</strong> que você aprender aqui. Dessa forma, você sempre poderá revisar esses conceitos quando necessário.<br />Além disso, ao longo do roadmap, selecionei diversos projetos práticos para que você possa aplicar os conteúdos aprendidos. <strong>Armazene os projetos mais relevantes no GitHub</strong> também (Coloquei o ícone “*” ao lado dos projetos que considero relevantes.), pois <strong>isso servirá como portfólio para você</strong> no futuro. Durante entrevistas de emprego, você poderá apresentar esses projetos, permitindo que os recrutadores visualizem as <strong>tecnologias que você já domina</strong>.</li><li>Outro ponto importante a ser destacado é que, como essa é uma curadoria de conteúdos relevantes, é possível que alguns temas se repitam nos vídeos. Fiz o possível para evitar ao máximo essa repetição, porém, em alguns casos específicos, isso é inevitável. Nesses momentos, recomendo usar o bom senso: se for um conteúdo que você ainda não domina completamente, aproveite para revisá-lo; no entanto, se já tiver total domínio sobre o tema, avance para os próximos conteúdos do vídeo.</li></ol>",
        "__collections__": {}
      },
      "javascript": {
        "1": {
          "title": "Fundamentos do JavaScript",
          "steps": [
            "<div class=\"tip-box\">Lembre-se de ignorar as introduções e finalizações dos vídeos, elas consomem bastante tempo rsrsrs.</div>",
            "<strong><a href=\"https://www.youtube.com/watch?v=hyMCPZNLXps\">Curso de JavaScript para iniciantes - aprenda os fundamentos de JavaScript</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=Vbabsye7mWo\">Variáveis e Tipos de dados (começa em 7:30)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=OJgu_KCCUSY\">Manipulando strings e numbers (Começa em 2:59)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=hZG9ODUdxHo\">Operadores Parte 1 (Começa em 2:39)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=BP63NhITvao\">Operadores Parte 2 (Começa em 1:28)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=WWZX8RWLxIk\">DOM (Começa em 1:18)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=wWnBB-mZIvY\">Eventos DOM (Começa em 1:17)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=cOdG4eACN2A\">Condições Parte 1 (Começa em 2:08)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=EEStcIe8rAM\">Condições Parte 2 (Começa em 1:30)</a></strong>",
            {
              "title": "Recapitulando na prática (Pra salvar no seu portfólio)",
              "steps": "<ol><strong><li><a href=\"https://www.youtube.com/watch?v=b2K7eo5Jdj8\">https://www.youtube.com/watch?v=b2K7eo5Jdj8</a></li></strong><strong><li><a href=\"https://www.youtube.com/watch?v=UXSWgnbSHxs\">https://www.youtube.com/watch?v=UXSWgnbSHxs</a></li></strong><strong><li><a href=\"https://www.youtube.com/watch?v=f5es-PpaUI8\">https://www.youtube.com/watch?v=f5es-PpaUI8</a></li></strong></ol>"
            },
            "<strong><a href=\"https://www.youtube.com/watch?v=5rZqYPKIwkY\">Repetições Parte 1 (Começa em 2:20)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=eX-lkN_Zahc\">Repetições Parte 2 (Começa em 1:25)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=XdkW62tkAgU\">Arrays (Começa em 1:40)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=mc3TKp2XzhI\">Funções Parte 1 (Começa em 1:38)</a></strong>",
            {
              "title": "Recapitulando na prática (Pra salvar no seu portfólio)",
              "steps": "<ol><strong><li><a href=\"https://www.youtube.com/watch?v=6tyHypeY4-8\">https://www.youtube.com/watch?v=6tyHypeY4-8</a></li></strong><strong><li><a href=\"https://www.youtube.com/watch?v=oMNbc_LFz8w\">https://www.youtube.com/watch?v=oMNbc_LFz8w</a></li></strong><strong><li><a href=\"https://www.youtube.com/watch?v=mfHAQ-4Rspw\">https://www.youtube.com/watch?v=mfHAQ-4Rspw</a></li></strong></ol>"
            },
            "<strong><a href=\"https://www.youtube.com/watch?v=YgHQRdGZw3w\">Funções ou Métodos Parte 2 (Começa em 1:12)</a></strong>",
            "<strong><a href=\"https://www.youtube.com/watch?v=wzJy46B-8eA\">Objetos Parte 1 (Começa em 2:10)</a></strong>",
            "<a href=\"https://www.youtube.com/watch?v=n5uiJr-v0KQ\">Objetos Parte 2</a>",
            "<a href=\"https://www.youtube.com/watch?v=CqQVAXilGEw\">Diferença entre arrays e objetos</a>",
            {
              "title": "Projetos de fixação (Pra salvar no seu portfólio)",
              "steps": "<ol><li><strong><a href=\"https://www.youtube.com/watch?v=HSssE1PRQcA\">To Do List</a></strong></li><li><strong><a href=\"https://www.youtube.com/watch?v=i6t2jaRxos4\">Gerador de senhas</a></strong></li><li><strong><a href=\"https://www.youtube.com/watch?v=SbST27OWpmo\">Cronômetro</a></strong></li><li><strong><a href=\"https://www.youtube.com/watch?v=gDKsrIuyZZE\">Valentines Day</a></strong></li><li><strong><a href=\"https://www.youtube.com/watch?v=0EiX9c4vzRs\">Jogo da velha</a></strong></li><li><strong><a href=\"https://www.youtube.com/watch?v=KCfaPZ2t2yA\">Calculadora</a></strong></li></ol>"
            },
            "<div class=\"tip-box\">Parabéns! Chegando nesse ponto dos seus estudos, você realmente possui uma ótima base na famosa tríade do front-end: HTML, CSS e JavaScript. No entanto, se você ainda não está completamente seguro sobre o que está fazendo ou apenas replicando os códigos dos vídeos, recomendo que não avance além desse ponto. É importante voltar e fortalecer essa base, pois você vai precisar muito do que aprendeu até agora.<br />Uma dica adicional é não se preocupar em decorar todos os conceitos vistos nos vídeos. Em vez disso, foque em entender o que está acontecendo por trás do código. Quando você precisar de um determinado conhecimento e não se lembrar, não se preocupe. Faça uma pesquisa e refresque sua memória sobre aquele assunto específico.<br />Lembre-se de que o objetivo é adquirir um entendimento sólido e aplicável dos conceitos. Com uma base forte e a capacidade de pesquisar quando necessário, você estará preparado para enfrentar desafios futuros e continuar aprendendo de forma eficaz.</div>"
          ]
        },
        "2": {
          "title": "JavaScript ES6 e Web Storage",
          "steps": [
            {
              "title": "Introdução ao ECMAScript 6 ou ES6",
              "steps": "ECMAScript 6, também conhecido como ES6 ou ES2015, é a sexta versão do padrão ECMAScript, que é a especificação padrão da linguagem JavaScript. O ECMAScript 6 introduziu várias novas funcionalidades e melhorias significativas na linguagem JavaScript, tornando-a mais poderosa, expressiva e fácil de usar.<br /><strong>Algumas das principais características do ECMAScript 6 incluem:</strong><ul><li>Novas sintaxes e recursos para declaração de variáveis, como <code>let</code> e <code>const</code>, que oferecem maior controle sobre o escopo das variáveis.</li><li>Funções de seta (arrow functions), que são uma forma mais concisa de escrever funções e têm um escopo de <code>this</code> léxico.</li><li>Desestruturação de objetos e arrays, permitindo atribuir valores a variáveis de forma mais direta e conveniente.</li><li>Classes, que permitem criar objetos com comportamentos e propriedades compartilhados de uma forma mais orientada a objetos.</li><li>Módulos, que permitem dividir o código JavaScript em arquivos separados e reutilizáveis, melhorando a organização e a manutenibilidade do código.</li><li>Melhorias na manipulação de strings, como interpolação de strings usando <code>template literals</code>.</li><li>Promises, que são objetos usados para representar o resultado assíncrono de uma operação, tornando o tratamento de código assíncrono mais fácil e legível.</li><li>Novos métodos e funcionalidades para arrays e objetos, como <code>map</code>, <code>filter</code>, <code>find</code>, <code>Object.assign</code> e muito mais.</li></ul>O ECMAScript 6 trouxe um conjunto robusto de recursos que tornam a programação em JavaScript mais eficiente, legível e moderna. É amplamente suportado pelos navegadores e ambientes de desenvolvimento JavaScript atuais, permitindo que os desenvolvedores aproveitem ao máximo essas melhorias na linguagem."
            },
            {
              "title": "Higher Order Functions ou HOFs",
              "steps": [
                "<strong><a href='https://www.youtube.com/watch?v=N0jvupDifD0'>O que são Higher Order Functions?</a></strong>",
                "<strong><a href='https://www.youtube.com/watch?v=CfG25rmPJmk'>filter()</a></strong>",
                "<strong><a href='https://www.youtube.com/watch?v=V--PAfBt2Zc'>find()</a></strong>",
                "<strong><a href='https://www.youtube.com/watch?v=qVKSb0OPQPQ'>sort()</a></strong>",
                "<strong><a href='https://www.youtube.com/watch?v=GXpBfDW4lT8'>some()</a></strong>",
                "<strong><a href='https://www.youtube.com/watch?v=IzlP3FJwA58'>reduce()</a></strong>",
                "<strong><a href='https://www.youtube.com/watch?v=E4In5QhNYHw'>forEach()</a></strong>",
                "<strong><a href='https://www.youtube.com/watch?v=AMpm9rZT2c8'>map()</a></strong>",
                {
                  "title": "Recapitulando na prática",
                  "steps": [
                    "<div class=\"tip-box\">Sugiro que você crie uma pasta no seu computador e, dentro dela, crie arquivos separados para armazenar cada um desses exercícios. Dessa forma, você terá um local organizado onde poderá acessar e revisar os exercícios sempre que desejar.</div>"
                  ]
                }
              ]
            },
            {
              "title": "Spread Operator, Rest Parameters e Desestruturação",
              "steps": []
            },
            {
              "title": "Web Storage",
              "steps": []
            }
          ]
        },
        "__collections__": {}
      }
    },
    "users": {
      "AdHBuZQqz1B2uGtcnEB4": {
        "__collections__": {}
      },
      "KrqXoHbwK7SYR3AnPTp5AJVNXW12": {
        "password": "!6bkwXB5rGDfENz",
        "email": "afonso@gmail.com",
        "__collections__": {}
      }
    }
  }
}